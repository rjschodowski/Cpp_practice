#include <iostream>
#include <string>
using namespace std;

/* Each example can be run separately by copying and pasting into your IDE or text editor */

// **********************************************************************************************************

//Basic example of a class

// **********************************************************************************************************

class Veggies {

public:
  
  string name;
  string color;
  int getAmount(int number);
};

int Veggies::getAmount(int number) {
  return number;
}

int main() {

  //Objects
  Veggies vegetable1;
  vegetable1.getAmount(0);
  vegetable1.name = "carrots";
  vegetable1.color = "orange";

  Veggies vegetable2;
  vegetable2.getAmount(0);
  vegetable2.name = "radishes";
  vegetable2.color = "red";

  Veggies vegetable3;
  vegetable3.getAmount(0);
  vegetable3.name = "peppers";
  vegetable3.color = "green";

  cout << "I have " << vegetable1.getAmount(15) << " " << vegetable1.color << " " << vegetable1.name << "." << endl;
  
    cout << "I have " << vegetable3.getAmount(29) << " " << vegetable3.color << " " << vegetable3.name << "." << endl;

    cout << "I have " << vegetable2.getAmount(11) << " " << vegetable2.color << " " << vegetable2.name << "." << endl;
}

// **********************************************************************************************************

//Example of a class constructor defined inside the class

// **********************************************************************************************************

#include <iostream>
#include <string>
using namespace std;


//Constructor defined inside the class

class Veggies { // Constructor declaration
public:
  string name;
  string color;
  Veggies(string n, string c) {  // Constructor
  name = n;
  color = c;
  }
  
};

int main() {
//Creatd Veggies object
  Veggies vegetable1("carrots", "orange");

  cout <<  "I have two " << vegetable1.color << " " << vegetable1.name << "." << endl;
}

// **********************************************************************************************************

//Example of a class constructor defined outside the class

// **********************************************************************************************************

#include <iostream>
#include <string>
using namespace std;


//Constructor defined outside the class

class Veggies { // Constructor declaration
public:
  string name;
  string color;
  Veggies(string n, string c);
  
};

// Constructor definition outside the class
Veggies::Veggies(string n, string c) {
  name = n;
  color = c;
  }

int main() {
//Creatd Veggies object
  Veggies vegetable1("carrots", "orange");

  cout <<  "I have two " << vegetable1.color << " " << vegetable1.name << "." << endl;
}

// **********************************************************************************************************

//Example of encapsulation: setters and getters

// **********************************************************************************************************

#include <iostream>
#include <string.h>
using namespace std;

class Employee {
  private:
    // Private attribute
    int salary;
    int age;
    string name;

  public:
    // Setters
    void setSalary(int s) {
      salary = s;
    }
    void setAge(int a) {
      age = a;
    }
    void setName(string n) {
      name = n;
    }
    // Getters
    int getSalary() {
      return salary;
    }
    
    int getAge() {
      return age;
    }
    string getName() {
      return name;
    }
};

int main() {
  Employee emp1;
  emp1.setSalary(50000);
  emp1.setAge(25);
  emp1.setName("Harold");
  cout << emp1.getName() << ", age " <<emp1.getAge() << ", has salary of " << emp1.getSalary() << "." << endl; 
  return 0;
}

// **********************************************************************************************************

//Another example of encapsulation: setters and getters

// **********************************************************************************************************

#include <iostream>
using namespace std;

class Rectangle {
  int length;
  int width;

  public:
//keep in mind these functions are declared within the class
  void setLength(int l){ 
    length = l;
  }
  int getLength() {
    return length;
  }

  void setWidth(int w) {
    width = w;
  }

  int getWidth() {
    return width;
  }
  
  int area(){
    return length * width; 
  }
};

int main() {
  Rectangle rect;
  rect.setLength(2200);
  cout << rect.getLength() << endl;
  rect.setWidth(2);
  cout << rect.getWidth() << endl;
  cout << rect.area() << endl;
}

// **********************************************************************************************************

//And yet one more example of encapsulation: setters and getters (functions defined outside the class)

// **********************************************************************************************************

#include <iostream>
using namespace std;

class Rectangle {
  int length;
  int width;
public:
  void setLength(int l);
  int getLength();
  void setWidth(int w);
  int getWidth();
  int area();
};

void Rectangle::setLength(int l) {
  length = l;
}
int Rectangle::getLength() {
  return length;
}
void Rectangle::setWidth(int w) {
  width = w;
}
int Rectangle::getWidth() {
  return width;
  }
int Rectangle::area() {
  return length * width;
}

int main() {
  Rectangle rect;
  rect.setLength(50);
  rect.setWidth(100);
  cout << rect.area();
}

// **********************************************************************************************************

//The same rectangle area calculation class, but with default and parameterized constructors. I learned this 
//is a little less code to write than with the setters and getters.

// **********************************************************************************************************

#include <iostream>
#include <string>
using namespace std;

class Rectangle {
  int length;
  int width;
  public:
  Rectangle() {
    length = 0;
    width = 0;
  }
  Rectangle(int length, int width) {
    this->length = length;
    this->width = width;
  }
  int area() {
    return length * width;
  }
  void printArea() {
    cout << area();
  }
};

int main() {
  Rectangle rect(25,25);
  rect.printArea();
}


// **********************************************************************************************************

//Another Example of Constructor

// **********************************************************************************************************

#include <iostream>
#include <string>
using namespace std;

class Person {
  int age;
  int height;
  int weight;
  int moneyInBank;
  int moneySpent;
  string firstName;
  string lastName;

  public:

  Person(string firstName, string lastName, int age, int weight, int height, int moneyInBank, int moneySpent) {
    this->firstName = firstName;
    this->lastName = lastName;
    this->age = age;
    this->weight = weight;
    this->height = height;
    this->moneyInBank = moneyInBank;
    this->moneySpent = moneySpent;
  }
  void printPersonData() {
    cout << firstName << " " << lastName << " " << "is " << age << " years old, weighs " << weight << " pounds and is " << height << " inches tall." << endl;
    cout << "Mr. " << lastName << " had " << moneyInBank << " dollars, but after spending it now has " << " dollars left." << endl;
  }
};

int main() {
  Person RJ("R.J.", "Schodowski", 4, 50, 25, 10, 3);
  RJ.printPersonData();
}


// **********************************************************************************************************

//Example of a Destructor

// **********************************************************************************************************

#include <iostream>
#include <string>
using namespace std;


//Destructor example from Educative
//A destructor is the opposite of a constructor.
//It is called when the object of a class is no longer in use. The object is destroyed and the memory it occupied is now free for future use.

class Collector {
  int * list;
  int size;
  int capacity;

  public:
  // Default constructor
  Collector(){
    // We must define the default values for the data members
    list = nullptr;
    size = 0;
    capacity = 0;
  }
  
  // Parameterized constructor
  Collector(int cap){
    // The arguments are used as values
    capacity = cap;
    size = 0;
    list = new int[capacity];
  }

  bool append(int v){
    if (size < capacity) {
      list [ size++ ] = v;
      return true;
    }
    return false;
  }

  // A simple print function
  void dump(){ 
    for(int i = 0 ; i < size ; i++) {
      cout << list[i] << " ";
    }
    cout << endl;
  }
  
  ~Collector(){
    cout << "Deleting the object " << endl;
    if (capacity > 0)
      delete[] list; 
  }
};

int main(){  
  Collector *c;
  c = new Collector(10); 
  for (int i = 0 ; i < 15 ; i++){
    cout << c->append(i) << endl;
  }
  delete c;
  cout << "Exiting program" << endl;
}

// **********************************************************************************************************

//More class practice - multiple classes and constructors

// **********************************************************************************************************

#include <iostream>
#include <string>
using namespace std;

//Exercise: create a program that has an animal class and prints

class Animal {
public:
string name;
string gender;
int age;
Animal(string name, string gender, int age) {
  this->name = name;
  this->gender = gender;
  this->age = age;
}
void printAnimalData() {
  cout << name << ", " << gender << ", " << age << "." << endl;
}
};


class Person {
public:
string name;
string gender;
int age;
Person(string name, string gender, int age) {
  this->name = name;
  this->gender = gender;
  this->age = age;
}
void printPersonData() {
  cout << name << ", " << gender << ", " << age << "." << endl;
}
};


class Computer {
public:
string name;
string brand;
int age;
Computer(string name, string brand, int age) {
  this->name = name;
  this->brand = brand;
  this->age = age;
}
void printComputerData() {
  cout << name << ", " << brand << ", " << age << "." << endl;
}
};


int main() {
  Animal Mouse("Mouse", "female", 2);
  Mouse.printAnimalData();
  Person human("Dave", "male", 45);
  human.printPersonData();
  Computer Mac("MacBook", "Apple", 10);
  Mac.printComputerData();
}

// **********************************************************************************************************

//Example of a Friend Function

// **********************************************************************************************************

/*
The private data members of a class are only accessible through the functions present in that class. Nothing from outside can manipulate the class object without using its functions.

What if we need to access class variables in a function which is not a part of the class? That function would have to become a friend of the class.

A friend function is an independent function which has access to the variables and methods of its befriended class.

To create a friend function for a class, it must be declared in the class along with the friend keyword.

Let’s create a Ball class to explain this better:
*/

#include <iostream>
#include <string>

using namespace std;

class Ball{
  double radius;
  string color;
  
  public:
  Ball(){
    radius = 0;
    color = "";
  }
  
  Ball(double r, string c){
    radius = r;
    color = c;
  }
  
  void printVolume();
  void printRadius();
  
  // The friend keyword specifies that this is a friend function
  friend void setRadius(Ball &b, double r); 
    
};

// This is a member function that calculates the volume.
void Ball::printVolume(){
  cout << (4/3) * 3.142 * radius * radius * radius << endl;
}

void Ball::printRadius(){
  cout << radius << endl;
}

// The implementation of our friend function
void setRadius(Ball &b, double r){
  b.radius = r;
}

 int main(){
   Ball b(30, "green");
   cout << "Radius: ";
   b.printRadius();
   setRadius(b, 60);
   cout << "New radius: ";
   b.printRadius();
   cout << "Volume: ";
   b.printVolume();
 }
 
 /*
 we can see that the Ball object is being passed by reference to the friend function. This is a crucial step in the functionality of the friend. If the object is not passed
 by reference, the changes made in the friend function will not work outside its scope. Basically, our object will not be altered.

The setRadius() function is completely independent of the Ball class, yet it has access to all the private variables. This is the beauty of the friend keyword.
 */

// **********************************************************************************************************

//Example of inheritance

// **********************************************************************************************************


//Example 1 (simple)

#include <iostream>
#include <string.h>
using namespace std;

//Base class
class Animal {
  public: 
    string speciesName = "mammal";
    int numLegs = 2;
};

//Derived class
class Chimp: public Animal {
  public: 
    void signatureSound() {
      cout << "Ooh, ooh, ah, ah!\n";
    }
    string name = "chimp";
};  

int main() {
  Chimp myChimp;
  myChimp.signatureSound();
  cout << "A " << myChimp.name << " is a " <<myChimp.speciesName << " with " <<myChimp.numLegs << " legs.";

}


// **********************************************************************************************************

//Basic example of Polymorphism

// **********************************************************************************************************

/*
Problem Statement#
Write a code that has:

A parent class named Account.
Inside it define:
a protected float member balance
We have three virtual functions:
void Withdraw(float amount)
void Deposit(float amount)
void printBalance()

Then, there are two derived classes
Savings class
has a private member interest_rate set to 0.8
Withdraw(float amount) deducts amount from balance with interest_rate
Deposit(float amount) adds amount in balance with interest_rate
printBalance() displays the balance in the account
Current class
Withdraw(float amount) deducts amount from balance
Deposit(float amount) adds amount in balance
printBalance() displays the balance in the account`

Input#
In Savings class, balance is set to 50000 in parametrized constructor of Savings object
In Current class, balance is set to 50000 in parametrized constructor of Current object

Sample Input
Savings s1(50000);
  Account * acc = &s1;
  acc->Deposit(1000);
  acc->printBalance();
  
  acc->Withdraw(3000);
  acc->printBalance();
  
  
  Current c1(50000);
  acc = &c1;
  acc->Deposit(1000);
  acc->printBalance();
  
  acc->Withdraw(3000);
  acc->printBalance();
*/

#include <iostream>
using namespace std;

class Account {
protected:
float balance;
public:
virtual void Withdraw(float amount)
{
  
}

virtual void Deposit(float amount)
{
  
}

virtual void printBalance()
{
  
}

};

class Savings:public Account {
  private:
  float interest_rate = 0.8;
  public:
  Savings(float startingBalance)
  {
    balance = startingBalance;
  }

  void withdraw(float amount)
  {
    balance = balance - (amount*interest_rate);
  }

  void Deposit(float amount)
  {
    balance = balance + (amount*interest_rate);
  } 

  void printBalance()
  {
    cout << balance << endl;
  } 
};

class Current:public Account {
public:

Current(float startingBalance)
{
  balance = startingBalance;
}
void withdraw(float amount) {
    balance = balance - amount;
  }

  void Deposit(float amount) {
    balance+=amount;
  } 

  void printBalance() {
    cout << balance << endl;
  } 
};

int main() {
 Savings s1(50000);
  Account* acc = &s1;
  acc->Deposit(1000);
  acc->printBalance();
  return 0;
}

